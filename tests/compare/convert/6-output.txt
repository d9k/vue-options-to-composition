import mapGetters from 'vuex';
import store from '../../../store/modules/base.module';
import datePicker from 'vue2-datepicker';
import appVSAEOMSummarySettlementReport from '../../../components/admin/reports/VSAEOMSummarySettlementReport.vue';
import appVSAEOMManagementReport from '../../../components/admin/reports/VSAEOMManagementReport.vue';
import reportService from '../../../services/report.service';
import messageService from '../../../services/message.service';
import { reactive, ref, computed, onMounted } from 'vue';


// Data
const errors = reactive({});
const dealers = reactive([]);
const reportId = ref('');
const rptData = reactive([]);
const dealerIds = reactive([]);
const fromDate = ref('');
const toDate = ref('');

// Methods
const fnSelectReport = function(reportId) {
	rptData = []
	reportId.value = reportId
}

const fnGenerate = async function() {
	if (reportId.value == 1 || reportId.value == 4) {
		let dealers = dealers
		let dealerIds = []

		if (Array.isArray(dealers)) {
			dealers.filter(function (item) {
				return dealerIds.push(item.id)
			})
			dealerIds = dealerIds
		} else if (!Array.isArray(dealers) && dealers) {
			dealerIds = [dealers.id]
		} else {
			dealerIds = ''
		}
	} else if (reportId.value == 2 || reportId.value == 3) {
		if (dealers && dealers.id) {
			dealerIds = [dealers.id]
		} else {
			dealerIds = ''
		}
	}

	try {
		let dataObj = {
			reportId: reportId.value,
			fromDate: fromDate.value,
			toDate: toDate.value,
			dealerIds: dealerIds
		}

		errors = {}

		const res = await reportService.getAllSettledReport(dataObj)
		rptData = res.data
		localStorage.setItem('dataObj', JSON.stringify(dataObj))
	} catch (error) {
		switch (error.response.status) {
		case 422:
			errors = error.response.data.errors
			break

		case 500:
			messageService.fnSweetAlertErrorToast(
				'Data range',
				error.response.data.message
			)
			break

		default:
			messageService.fnSweetAlertErrorToast(
				'Data range',
				'Something wrong'
			)
			break
		}
	}
}

const fnPrintCall = function() {
	if (reportId.value == 4) {
		const routeData = this.$router.resolve({
			name: 'VSAEOMManagementReportPrintAdmin'
		})
		window.open(routeData.href, '_blank')
	}
}

const fnDownloadVsaSettlement = async function() {
	let dealers = dealers
	let dealerIds = []

	if (Array.isArray(dealers)) {
		dealers.filter(function (item) {
			return dealerIds.push(item.id)
		})
		dealerIds = dealerIds
	} else if (!Array.isArray(dealers) && dealers) {
		dealerIds = [dealers.id]
	} else {
		dealerIds = ''
	}

	try {
		let dataObj = {
			reportId: reportId.value,
			fromDate: fromDate.value,
			toDate: toDate.value,
			dealerIds: dealerIds
		}

		errors = {}

		console.log(dataObj)
		const filePath = await reportService.createVsaSettlementExport(dataObj)

		console.log('filePath', filePath)

		//file name and path of the finance doc.
		let obj3 = {
			file_name: filePath.data
		}

		// Download from Export VSA EOM Settlement Report in temp folder
		window.open(`${store.state.serverPath}/` + filePath.data, '_blank')

		// Delete temp Export VSA EOM Settlement Report in temp folder
		await reportService.deleteTempVsaSettlementExport(obj3)
	} catch (error) {
		switch (error.response.status) {
		case 422:
			errors = error.response.errors

			console.log(error)
			break

		case 500:
			messageService.fnSweetAlertErrorToast(
				'Data range',
				error.response.data.message
			)
			break

		default:
			messageService.fnSweetAlertErrorToast(
				'Data range',
				'Something wrong'
			)
			break
		}
	}
}


// Computed

// Created
this.fetchDealerDropdown()

// Mounted
onMounted(() => {})