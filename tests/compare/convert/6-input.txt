import { mapGetters, mapActions } from 'vuex'
import store from '../../../store/modules/base.module'
import datePicker from 'vue2-datepicker'
import appVSAEOMSummarySettlementReport from '../../../components/admin/reports/VSAEOMSummarySettlementReport.vue'
import appVSAEOMManagementReport from '../../../components/admin/reports/VSAEOMManagementReport.vue'
import * as reportService from '../../../services/report.service'
import * as messageService from '../../../services/message.service'

export default {
  name: 'Report',
  components: {
    datePicker,
    appVSAEOMSummarySettlementReport,
    appVSAEOMManagementReport
  },
  mounted() {},
  data() {
    return {
      errors: {},
      dealers: [],
      reportId: '',
      rptData: [],
      dealerIds: [],
      fromDate: '',
      toDate: ''
    }
  },
  computed: {
    ...mapGetters(['getDealerDropdown'])
  },
  methods: {
    ...mapActions(['fetchDealerDropdown', 'fetchReportInputs']),
    fnSelectReport(reportId) {
      this.rptData = []
      this.reportId = reportId
    },

    async fnGenerate() {
      if (this.reportId == 1 || this.reportId == 4) {
        let dealers = this.dealers
        let dealerIds = []

        if (Array.isArray(dealers)) {
          dealers.filter(function (item) {
            return dealerIds.push(item.id)
          })
          this.dealerIds = dealerIds
        } else if (!Array.isArray(dealers) && dealers) {
          this.dealerIds = [this.dealers.id]
        } else {
          this.dealerIds = ''
        }
      } else if (this.reportId == 2 || this.reportId == 3) {
        if (this.dealers && this.dealers.id) {
          this.dealerIds = [this.dealers.id]
        } else {
          this.dealerIds = ''
        }
      }

      try {
        let dataObj = {
          reportId: this.reportId,
          fromDate: this.fromDate,
          toDate: this.toDate,
          dealerIds: this.dealerIds
        }

        this.errors = {}

        const res = await reportService.getAllSettledReport(dataObj)
        this.rptData = res.data
        localStorage.setItem('dataObj', JSON.stringify(dataObj))
      } catch (error) {
        switch (error.response.status) {
          case 422:
            this.errors = error.response.data.errors
            break

          case 500:
            messageService.fnSweetAlertErrorToast(
              'Data range',
              error.response.data.message
            )
            break

          default:
            messageService.fnSweetAlertErrorToast(
              'Data range',
              'Something wrong'
            )
            break
        }
      }
    },
    fnPrintCall() {
      if (this.reportId == 4) {
        const routeData = this.$router.resolve({
          name: 'VSAEOMManagementReportPrintAdmin'
        })
        window.open(routeData.href, '_blank')
      }
    },

    async fnDownloadVsaSettlement() {
      let dealers = this.dealers
      let dealerIds = []

      if (Array.isArray(dealers)) {
        dealers.filter(function (item) {
          return dealerIds.push(item.id)
        })
        this.dealerIds = dealerIds
      } else if (!Array.isArray(dealers) && dealers) {
        this.dealerIds = [this.dealers.id]
      } else {
        this.dealerIds = ''
      }

      try {
        let dataObj = {
          reportId: this.reportId,
          fromDate: this.fromDate,
          toDate: this.toDate,
          dealerIds: this.dealerIds
        }

        this.errors = {}

        console.log(dataObj)
        const filePath = await reportService.createVsaSettlementExport(dataObj)

        console.log('filePath', filePath)

        //file name and path of the finance doc.
        let obj3 = {
          file_name: filePath.data
        }

        // Download from Export VSA EOM Settlement Report in temp folder
        window.open(`${store.state.serverPath}/` + filePath.data, '_blank')

        // Delete temp Export VSA EOM Settlement Report in temp folder
        await reportService.deleteTempVsaSettlementExport(obj3)
      } catch (error) {
        switch (error.response.status) {
          case 422:
            this.errors = error.response.errors

            console.log(error)
            break

          case 500:
            messageService.fnSweetAlertErrorToast(
              'Data range',
              error.response.data.message
            )
            break

          default:
            messageService.fnSweetAlertErrorToast(
              'Data range',
              'Something wrong'
            )
            break
        }
      }
    }
  },
  created() {
    this.fetchDealerDropdown()
  }
}
