import ImageViewer from './image-viewer';
import Locale from 'element-ui/src/mixins/locale';
import { on, off, getScrollContainer, isInContainer } from 'element-ui/src/utils/dom';
import { isString, isHtmlElement } from 'element-ui/src/utils/types';
import throttle from 'throttle-debounce/throttle';
import { reactive, ref, computed, watch, onMounted, onBeforeUnmount } from 'vue';


// Data
const loading = ref('true');
const error = ref('false');
const show = reactive(!this.lazy);
const imageWidth = ref('0');
const imageHeight = ref('0');
const showViewer = ref('false');

// Props
const props = defineProps({
	src: String,
	fit: String,
	lazy: Boolean,
	scrollContainer: {},
	previewSrcList: {
		type: Array,
		default: () => []
	},
	zIndex: {
		type: Number,
		default: 2000
	},
	initialIndex: Number
});

// Computed
const imageStyle = computed(() => {
	const { fit } = this;
	if (!this.$isServer && fit) {
		return isSupportObjectFit()
			? { 'object-fit': fit }
			: this.getImageStyle(fit);
	}
	return {};
})

const alignCenter = computed(() => {
	return !this.$isServer && !isSupportObjectFit() && props.fit !== ObjectFit.FILL;
})

const preview = computed(() => {
	const { previewSrcList } = this;
	return Array.isArray(previewSrcList) && previewSrcList.length > 0;
})

const imageIndex = computed(() => {
	let previewIndex = 0;
	const initialIndex = props.initialIndex;
	if (initialIndex >= 0) {
		previewIndex = initialIndex;
		return previewIndex;
	}
	const srcIndex = props.previewSrcList.indexOf(props.src);
	if (srcIndex >= 0) {
		previewIndex = srcIndex;
		return previewIndex;
	}
	return previewIndex;
})


// Methods
const loadImage = function() {
	if (this.$isServer) return;

	// reset status
	loading.value = true;
	error.value = false;

	const img = new Image();
	img.onload = e => handleLoad(e, img);
	img.onerror = handleError.bind(this);

	// bind html attrs
	// so it can behave consistently
	Object.keys(this.$attrs)
		.forEach((key) => {
			const value = this.$attrs[key];
			img.setAttribute(key, value);
		});
	img.src = props.src;
}

const handleLoad = function(e, img) {
	imageWidth.value = img.width;
	imageHeight.value = img.height;
	loading.value = false;
	error.value = false;
}

const handleError = function(e) {
	loading.value = false;
	error.value = true;
	this.$emit('error', e);
}

const handleLazyLoad = function() {
	if (isInContainer(this.$el, this._scrollContainer)) {
		show = true;
		removeLazyLoadListener();
	}
}

const addLazyLoadListener = function() {
	if (this.$isServer) return;

	const { scrollContainer } = this;
	let _scrollContainer = null;

	if (isHtmlElement(scrollContainer)) {
		_scrollContainer = scrollContainer;
	} else if (isString(scrollContainer)) {
		_scrollContainer = document.querySelector(scrollContainer);
	} else {
		_scrollContainer = getScrollContainer(this.$el);
	}

	if (_scrollContainer) {
		this._scrollContainer = _scrollContainer;
		this._lazyLoadHandler = throttle(200, handleLazyLoad);
		on(_scrollContainer, 'scroll', this._lazyLoadHandler);
		handleLazyLoad();
	}
}

const removeLazyLoadListener = function() {
	const { _scrollContainer, _lazyLoadHandler } = this;

	if (this.$isServer || !_scrollContainer || !_lazyLoadHandler) return;

	off(_scrollContainer, 'scroll', _lazyLoadHandler);
	this._scrollContainer = null;
	this._lazyLoadHandler = null;
}

const getImageStyle = function(fit) {
	const { imageWidth, imageHeight } = this;
	const {
		clientWidth: containerWidth,
		clientHeight: containerHeight
	} = this.$el;

	if (!imageWidth || !imageHeight || !containerWidth || !containerHeight) return {};

	const imageAspectRatio = imageWidth / imageHeight;
	const containerAspectRatio = containerWidth / containerHeight;

	if (fit === ObjectFit.SCALE_DOWN) {
		const isSmaller = imageWidth < containerWidth && imageHeight < containerHeight;
		fit = isSmaller ? ObjectFit.NONE : ObjectFit.CONTAIN;
	}

	switch (fit) {
	case ObjectFit.NONE:
		return { width: 'auto',
			height: 'auto' };
	case ObjectFit.CONTAIN:
		return (imageAspectRatio < containerAspectRatio) ? { width: 'auto' } : { height: 'auto' };
	case ObjectFit.COVER:
		return (imageAspectRatio < containerAspectRatio) ? { height: 'auto' } : { width: 'auto' };
	default:
		return {};
	}
}

const clickHandler = function() {
	// don't show viewer when preview is false
	if (!this.preview) {
		return;
	}
	// prevent body scroll
	prevOverflow = document.body.style.overflow;
	document.body.style.overflow = 'hidden';
	showViewer.value = true;
}

const closeViewer = function() {
	document.body.style.overflow = prevOverflow;
	showViewer.value = false;
}


// Watch
watch(src, function(val) {
	show && loadImage();
})

watch(show, function(val) {
	val && loadImage();
})


// Mounted
onMounted(() => {
	if (props.lazy) {
		addLazyLoadListener();
	} else {
		loadImage();
	}
})

// BeforeDestroy
onBeforeUnmount(() => {
	props.lazy && removeLazyLoadListener();
})